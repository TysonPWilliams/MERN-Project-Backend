name: Run Backend Tests (CI)

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:24.0.5
        options: --privileged 
    
    permissions:
      checks: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create .env file for Docker Compose
        run: |
          echo "DATABASE_URL=mongodb://mongo:27017/test-btc-lending" > .env
          echo "DEV_PORT=3000" >> .env
          echo "PROD_PORT=3001" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        run: |
          curl -SL https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

      - name: Run test container via Docker Compose
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          docker compose -f docker-compose.yml build test
          docker compose -f docker-compose.yml run --rm test
      
      - name: Copy test results from container
        if: always()
        run: |
          docker compose -f docker-compose.yml run --rm -v $(pwd)/test-results:/app/test-results test || true
      
      - name: Upload test results as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_number }}
          path: test-results/
          retention-days: 30
      
      - name: Publish Test Results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: "test-results/junit.xml"
          comment_mode: always
          compare_to_earlier_commit: true

      - name: Clean up containers
        if: always()
        run: docker compose down -v

      - name: Notify Discord
        if: always()
        run: |
          if [ -f "test-results/junit.xml" ]; then
            # Parse test results from junit.xml
            TESTS=$(grep -o 'tests="[0-9]*"' test-results/junit.xml | grep -o '[0-9]*' || echo "0")
            FAILURES=$(grep -o 'failures="[0-9]*"' test-results/junit.xml | grep -o '[0-9]*' || echo "0")
            ERRORS=$(grep -o 'errors="[0-9]*"' test-results/junit.xml | grep -o '[0-9]*' || echo "0")
            PASSED=$((TESTS - FAILURES - ERRORS))
            
            if [ $FAILURES -eq 0 ] && [ $ERRORS -eq 0 ]; then
              STATUS="✅ PASSED"
              COLOR="3066993"
            else
              STATUS="❌ FAILED"
              COLOR="15158332"
            fi
          else
            STATUS="⚠️ NO RESULTS"
            COLOR="16776960"
            TESTS="0"
            PASSED="0"
            FAILURES="0"
            ERRORS="0"
          fi
          
          # Send Discord webhook
          curl -H "Content-Type: application/json" \
            -X POST \
            -d '{
              "embeds": [{
                "title": "Test Results - '"${{ github.repository }}"'",
                "description": "Branch: `'"${{ github.ref_name }}"'`\nCommit: `'"${{ github.sha }}"'`",
                "color": '"$COLOR"',
                "fields": [
                  {
                    "name": "Status",
                    "value": "'"$STATUS"'",
                    "inline": true
                  },
                  {
                    "name": "Tests Run",
                    "value": "'"$TESTS"'",
                    "inline": true
                  },
                  {
                    "name": "Passed",
                    "value": "'"$PASSED"'",
                    "inline": true
                  },
                  {
                    "name": "Failed",
                    "value": "'"$FAILURES"'",
                    "inline": true
                  },
                  {
                    "name": "Errors",
                    "value": "'"$ERRORS"'",
                    "inline": true
                  }
                ],
                "timestamp": "'"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"'",
                "footer": {
                  "text": "GitHub Actions"
                }
              }]
            }' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      
