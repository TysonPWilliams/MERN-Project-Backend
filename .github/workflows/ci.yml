# ==============================================================================
# CONTINUOUS INTEGRATION WORKFLOW
# ==============================================================================
# Purpose: Validates code quality through automated testing before deployment
# Triggers: Push to main/dev branches, Pull requests to main/dev
# Environment: Dockerized testing with isolated MongoDB instance
# Outputs: Test results, coverage reports, and team notifications
# ==============================================================================

name: Run Backend Tests (CI)

on:
  # Automatic trigger on code pushes to protected branches
  push:
    branches: [ main, dev ]    # Main = production, Dev = staging
    
  # Validate pull requests before merge approval
  pull_request:
    branches: [ main, dev ]    # Prevents broken code from entering main branches

jobs:
  test:
    runs-on: ubuntu-latest
    
    # Docker service provides isolated testing environment
    # Prevents conflicts between concurrent test runs
    services:
      docker:
        image: docker:24.0.5
        options: --privileged   # Required for Docker-in-Docker operations
    
    # GitHub token permissions for automated PR comments and status checks
    permissions:
      checks: write            # Update PR check status
      pull-requests: write     # Comment on PRs with test results

    steps:
      # Step 1: Source Code Retrieval
      # Downloads the latest code from the repository for testing
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Test Environment Configuration  
      # Creates isolated environment variables for testing
      # Uses separate test database to prevent production data corruption
      - name: Create .env file for Docker Compose
        run: |
          echo "DATABASE_URL=mongodb://mongo:27017/test-btc-lending" > .env  # Test DB instance
          echo "DEV_PORT=3000" >> .env                                       # Development port
          echo "PROD_PORT=3001" >> .env                                      # Production port  
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env                # Authentication secret

      # Step 3: Docker Build Environment Setup
      # Configures advanced Docker features for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 4: Docker Compose Installation
      # Installs specific version for consistent behavior across environments
      - name: Set up Docker Compose  
        run: |
          curl -SL https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

      # Step 5: Test Execution Pipeline
      # Builds and runs containerized test suite with isolated dependencies
      - name: Run test container via Docker Compose
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}  # Required for authentication tests
        run: |
          docker compose -f docker-compose.yml build test  # Build test container with dependencies
          docker compose -f docker-compose.yml run --rm test  # Execute tests and cleanup
      
      - name: Copy test results from container
        if: always()
        run: |
          docker compose -f docker-compose.yml run --rm -v $(pwd)/test-results:/app/test-results test || true
      
      - name: Upload test results as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_number }}
          path: test-results/
          retention-days: 30
      
      - name: Publish Test Results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: "test-results/junit.xml"
          comment_mode: always
          compare_to_earlier_commit: true

      - name: Clean up containers
        if: always()
        run: docker compose down -v

      - name: Notify Discord
        if: always()
        run: |
          if [ -f "test-results/junit.xml" ]; then
            # Parse test results from junit.xml
            TESTS=$(grep -o 'tests="[0-9]*"' test-results/junit.xml | head -1 | grep -o '[0-9]*' || echo "0")
            FAILURES=$(grep -o 'failures="[0-9]*"' test-results/junit.xml | head -1 | grep -o '[0-9]*' || echo "0")
            ERRORS=$(grep -o 'errors="[0-9]*"' test-results/junit.xml | head -1 | grep -o '[0-9]*' || echo "0")
            
            # Ensure variables are numeric
            TESTS=${TESTS:-0}
            FAILURES=${FAILURES:-0}
            ERRORS=${ERRORS:-0}
            PASSED=$((TESTS - FAILURES - ERRORS))
            
            if [ "$FAILURES" -eq 0 ] && [ "$ERRORS" -eq 0 ]; then
              STATUS="✅ PASSED"
              COLOR="3066993"
            else
              STATUS="❌ FAILED"
              COLOR="15158332"
            fi
          else
            STATUS="⚠️ NO RESULTS"
            COLOR="16776960"
            TESTS="0"
            PASSED="0"
            FAILURES="0"
            ERRORS="0"
          fi
          
          # Create JSON payload
          cat > discord_payload.json << EOF
          {
            "embeds": [{
              "title": "Test Results - ${{ github.repository }}",
              "description": "Branch: \`${{ github.ref_name }}\`\\nCommit: \`${{ github.sha }}\`",
              "color": $COLOR,
              "fields": [
                {
                  "name": "Status",
                  "value": "$STATUS",
                  "inline": true
                },
                {
                  "name": "Tests Run",
                  "value": "$TESTS",
                  "inline": true
                },
                {
                  "name": "Passed",
                  "value": "$PASSED",
                  "inline": true
                },
                {
                  "name": "Failed",
                  "value": "$FAILURES",
                  "inline": true
                },
                {
                  "name": "Errors",
                  "value": "$ERRORS",
                  "inline": true
                }
              ],
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)",
              "footer": {
                "text": "GitHub Actions"
              }
            }]
          }
          EOF
          
          # Send Discord webhook
          curl -H "Content-Type: application/json" \
            -X POST \
            -d @discord_payload.json \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      
