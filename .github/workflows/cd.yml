name: Deploy Backend to AWS EC2 (CD)

on:
  # Trigger on push to main branch
  push:
    branches: [ main ]
    
  # Trigger after CI tests complete successfully
  workflow_run:
    workflows: ["Run Backend Tests (CI)"]
    types:
      - completed
    branches: [ main ]
    
  # Scheduled trigger for maintenance deployments (every Sunday at 2 AM UTC)
  schedule:
    - cron: '0 2 * * 0'
    
  # Manual trigger with input parameters for controlled deployments
  workflow_dispatch:
    inputs:
      deployment_environment:
        description: 'Deployment Environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - hotfix
      skip_tests:
        description: 'Skip test validation (emergency deployments only)'
        required: false
        default: false
        type: boolean
      deployment_reason:
        description: 'Reason for manual deployment'
        required: true
        type: string

jobs:
  # Pre-deployment validation and condition checking
  pre-deploy-checks:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check-conditions.outputs.should_deploy }}
      deployment_type: ${{ steps.check-conditions.outputs.deployment_type }}
    steps:
      - name: Check deployment conditions
        id: check-conditions
        run: |
          # Get current time in different timezones for business hours check
          utc_hour=$(date -u +%H)
          utc_day=$(date -u +%u)
          
          echo "Current UTC hour: $utc_hour"
          echo "Current UTC day: $utc_day (1=Monday, 7=Sunday)"
          
          # Business hours check (9 AM - 6 PM UTC, Monday-Friday)
          business_hours=false
          if [ $utc_day -ge 1 ] && [ $utc_day -le 5 ] && [ $utc_hour -ge 9 ] && [ $utc_hour -le 18 ]; then
            business_hours=true
            echo "Currently within business hours"
          else
            echo "Currently outside business hours"
          fi
          
          # Determine if deployment should proceed based on trigger type
          should_deploy=false
          deployment_type="none"
          
          # Check different trigger scenarios
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            if [ "${{ github.event.workflow_run.conclusion }}" = "success" ]; then
              if [ "$business_hours" = "true" ]; then
                should_deploy=true
                deployment_type="automated_ci"
                echo "✅ Automated deployment: CI tests passed AND within business hours"
              else
                echo "❌ Skipping automated deployment: Outside business hours"
              fi
            else
              echo "❌ Skipping deployment: CI tests failed"
            fi
          elif [ "${{ github.event_name }}" = "push" ]; then
            if [ "$business_hours" = "true" ]; then
              should_deploy=true
              deployment_type="direct_push"
              echo "✅ Direct push deployment: Within business hours"
            else
              echo "❌ Skipping push deployment: Outside business hours"
            fi
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            should_deploy=true
            deployment_type="scheduled_maintenance"
            echo "✅ Scheduled maintenance deployment"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ github.event.inputs.skip_tests }}" = "true" ]; then
              should_deploy=true
              deployment_type="emergency_manual"
              echo "✅ Emergency manual deployment (tests skipped)"
            else
              should_deploy=true
              deployment_type="manual"
              echo "✅ Manual deployment requested"
            fi
          fi
          
          echo "should_deploy=$should_deploy" >> $GITHUB_OUTPUT
          echo "deployment_type=$deployment_type" >> $GITHUB_OUTPUT
          
          echo "Final decision: should_deploy=$should_deploy, deployment_type=$deployment_type"

  deploy:
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.should_deploy == 'true'
    
    environment: ${{ github.event.inputs.deployment_environment || 'production' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --only=production

      - name: Create deployment package
        run: |
          mkdir -p deployment
          cp -r * deployment/ 2>/dev/null || true
          cp -r .[!.]* deployment/ 2>/dev/null || true
          cd deployment
          rm -rf node_modules .git .github tests deployment
          npm ci --only=production
          tar -czf ../deployment.tar.gz .
          cd ..

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload deployment package to S3
        run: |
          aws s3 cp deployment.tar.gz s3://${{ secrets.S3_BUCKET_NAME }}/deployments/backend-${{ github.sha }}.tar.gz

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            # Set deployment variables
            APP_DIR="/home/${{ secrets.EC2_USERNAME }}/app"
            BACKUP_DIR="/home/${{ secrets.EC2_USERNAME }}/backups"
            SERVICE_NAME="backend-app"
            
            # Create directories if they don't exist
            mkdir -p $APP_DIR $BACKUP_DIR
            
            # Stop the application service
            if sudo systemctl is-active --quiet $SERVICE_NAME; then
              sudo systemctl stop $SERVICE_NAME
            fi
            
            # Create backup of current deployment
            if [ -d "$APP_DIR" ] && [ "$(ls -A $APP_DIR)" ]; then
              tar -czf "$BACKUP_DIR/backup-$(date +%Y%m%d-%H%M%S).tar.gz" -C "$APP_DIR" .
              # Keep only last 5 backups
              ls -t "$BACKUP_DIR"/backup-*.tar.gz | tail -n +6 | xargs -r rm
            fi
            
            # Download and extract new deployment
            cd /tmp
            aws s3 cp s3://${{ secrets.S3_BUCKET_NAME }}/deployments/backend-${{ github.sha }}.tar.gz deployment.tar.gz
            
            # Clear app directory and extract new code
            rm -rf $APP_DIR/*
            tar -xzf deployment.tar.gz -C $APP_DIR
            
            # Set proper permissions
            sudo chown -R ${{ secrets.EC2_USERNAME }}:${{ secrets.EC2_USERNAME }} $APP_DIR
            
            # Create production environment file
            cat > $APP_DIR/.env << EOF
            NODE_ENV=production
            PORT=${{ secrets.PROD_PORT }}
            DATABASE_URL=${{ secrets.PROD_DATABASE_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
            EOF
            
            # Set secure permissions on .env file
            chmod 600 $APP_DIR/.env
            
            # Install/update Node.js dependencies
            cd $APP_DIR
            npm ci --only=production
            
            # Start the application service
            sudo systemctl start $SERVICE_NAME
            sudo systemctl enable $SERVICE_NAME
            
            # Wait a moment and check if service started successfully
            sleep 5
            if sudo systemctl is-active --quiet $SERVICE_NAME; then
              echo "Deployment successful - service is running"
            else
              echo "Deployment failed - service is not running"
              sudo journalctl -u $SERVICE_NAME --no-pager -n 20
              exit 1
            fi

      - name: Health check
        run: |
          echo "Deployment completed successfully - service is running"
          echo "Manual health check required: http://${{ secrets.EC2_HOST }}:${{ secrets.PROD_PORT }}/api/health"

      - name: Cleanup
        if: always()
        run: |
          rm -f deployment.tar.gz
          rm -rf deployment/

      - name: Notify Discord on success
        if: success()
        run: |
          # Determine deployment context for notification
          deployment_env="${{ github.event.inputs.deployment_environment || 'production' }}"
          trigger_type="${{ github.event_name }}"
          deployment_type="${{ needs.pre-deploy-checks.outputs.deployment_type }}"
          
          # Set appropriate emoji and description based on deployment type
          case "$deployment_type" in
            "automated_ci")
              emoji="🤖"
              description="Automated deployment triggered by CI success"
              ;;
            "direct_push")
              emoji="⚡"
              description="Direct push deployment to main branch"
              ;;
            "scheduled_maintenance")
              emoji="🔧"
              description="Scheduled maintenance deployment"
              ;;
            "manual")
              emoji="👤"
              description="Manual deployment: ${{ github.event.inputs.deployment_reason || 'No reason provided' }}"
              ;;
            "emergency_manual")
              emoji="🚨"
              description="EMERGENCY deployment (tests skipped): ${{ github.event.inputs.deployment_reason || 'No reason provided' }}"
              ;;
            *)
              emoji="🚀"
              description="Backend deployed to AWS EC2"
              ;;
          esac
          
          cat > discord_payload.json << EOF
          {
            "embeds": [{
              "title": "$emoji Deployment Successful",
              "description": "$description",
              "color": 3066993,
              "fields": [
                {
                  "name": "Repository",
                  "value": "${{ github.repository }}",
                  "inline": true
                },
                {
                  "name": "Environment",
                  "value": "$deployment_env",
                  "inline": true
                },
                {
                  "name": "Trigger Type",
                  "value": "$trigger_type",
                  "inline": true
                },
                {
                  "name": "Branch",
                  "value": "${{ github.ref_name }}",
                  "inline": true
                },
                {
                  "name": "Deployment Type",
                  "value": "$deployment_type",
                  "inline": true
                },
                {
                  "name": "Actor",
                  "value": "${{ github.actor }}",
                  "inline": true
                },
                {
                  "name": "Commit",
                  "value": "[\`${GITHUB_SHA:0:7}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})",
                  "inline": false
                }
              ],
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)",
              "footer": {
                "text": "GitHub Actions CD • Run #${{ github.run_number }}"
              }
            }]
          }
          EOF
          
          curl -H "Content-Type: application/json" \
            -X POST \
            -d @discord_payload.json \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Notify Discord on failure
        if: failure()
        run: |
          cat > discord_payload.json << EOF
          {
            "embeds": [{
              "title": "❌ Deployment Failed",
              "description": "Backend deployment to AWS EC2 failed",
              "color": 15158332,
              "fields": [
                {
                  "name": "Repository",
                  "value": "${{ github.repository }}",
                  "inline": true
                },
                {
                  "name": "Branch",
                  "value": "${{ github.ref_name }}",
                  "inline": true
                },
                {
                  "name": "Commit",
                  "value": "\`${{ github.sha }}\`",
                  "inline": false
                },
                {
                  "name": "Environment",
                  "value": "Production",
                  "inline": true
                }
              ],
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)",
              "footer": {
                "text": "GitHub Actions CD"
              }
            }]
          }
          EOF
          
          curl -H "Content-Type: application/json" \
            -X POST \
            -d @discord_payload.json \
            ${{ secrets.DISCORD_WEBHOOK_URL }}